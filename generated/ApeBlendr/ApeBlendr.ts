// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApeBlendrEntered extends ethereum.Event {
  get params(): ApeBlendrEntered__Params {
    return new ApeBlendrEntered__Params(this);
  }
}

export class ApeBlendrEntered__Params {
  _event: ApeBlendrEntered;

  constructor(event: ApeBlendrEntered) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ApeBlendrExited extends ethereum.Event {
  get params(): ApeBlendrExited__Params {
    return new ApeBlendrExited__Params(this);
  }
}

export class ApeBlendrExited__Params {
  _event: ApeBlendrExited;

  constructor(event: ApeBlendrExited) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AwardingFinished extends ethereum.Event {
  get params(): AwardingFinished__Params {
    return new AwardingFinished__Params(this);
  }
}

export class AwardingFinished__Params {
  _event: AwardingFinished;

  constructor(event: AwardingFinished) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get awardForDraw(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AwardingStarted extends ethereum.Event {
  get params(): AwardingStarted__Params {
    return new AwardingStarted__Params(this);
  }
}

export class AwardingStarted__Params {
  _event: AwardingStarted;

  constructor(event: AwardingStarted) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get awardForDraw(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EpochEnded extends ethereum.Event {
  get params(): EpochEnded__Params {
    return new EpochEnded__Params(this);
  }
}

export class EpochEnded__Params {
  _event: EpochEnded;

  constructor(event: EpochEnded) {
    this._event = event;
  }

  get newEpochStartedAt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NoAwardForCurrentEpoch extends ethereum.Event {
  get params(): NoAwardForCurrentEpoch__Params {
    return new NoAwardForCurrentEpoch__Params(this);
  }
}

export class NoAwardForCurrentEpoch__Params {
  _event: NoAwardForCurrentEpoch;

  constructor(event: NoAwardForCurrentEpoch) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApeBlendr__apeDrawsResult {
  value0: Address;
  value1: BigInt;
  value2: boolean;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: boolean,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getWinner(): Address {
    return this.value0;
  }

  getApeCoinAward(): BigInt {
    return this.value1;
  }

  getIsFinalised(): boolean {
    return this.value2;
  }

  getBlockNumber(): BigInt {
    return this.value3;
  }
}

export class ApeBlendr__getApeCoinStakeResultValue0Struct extends ethereum.Tuple {
  get poolId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get deposited(): BigInt {
    return this[2].toBigInt();
  }

  get unclaimed(): BigInt {
    return this[3].toBigInt();
  }

  get rewards24hr(): BigInt {
    return this[4].toBigInt();
  }

  get pair(): ApeBlendr__getApeCoinStakeResultValue0PairStruct {
    return changetype<ApeBlendr__getApeCoinStakeResultValue0PairStruct>(
      this[5].toTuple()
    );
  }
}

export class ApeBlendr__getApeCoinStakeResultValue0PairStruct extends ethereum.Tuple {
  get mainTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get mainTypePoolId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ApeBlendr extends ethereum.SmartContract {
  static bind(address: Address): ApeBlendr {
    return new ApeBlendr("ApeBlendr", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  apeBlendrFeeBps(): BigInt {
    let result = super.call(
      "apeBlendrFeeBps",
      "apeBlendrFeeBps():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_apeBlendrFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "apeBlendrFeeBps",
      "apeBlendrFeeBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  apeCoin(): Address {
    let result = super.call("apeCoin", "apeCoin():(address)", []);

    return result[0].toAddress();
  }

  try_apeCoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("apeCoin", "apeCoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  apeCoinStaking(): Address {
    let result = super.call("apeCoinStaking", "apeCoinStaking():(address)", []);

    return result[0].toAddress();
  }

  try_apeCoinStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "apeCoinStaking",
      "apeCoinStaking():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  apeDraws(param0: BigInt): ApeBlendr__apeDrawsResult {
    let result = super.call(
      "apeDraws",
      "apeDraws(uint256):(address,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ApeBlendr__apeDrawsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBigInt()
    );
  }

  try_apeDraws(param0: BigInt): ethereum.CallResult<ApeBlendr__apeDrawsResult> {
    let result = super.tryCall(
      "apeDraws",
      "apeDraws(uint256):(address,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ApeBlendr__apeDrawsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBigInt()
      )
    );
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  awardInProgress(): boolean {
    let result = super.call("awardInProgress", "awardInProgress():(bool)", []);

    return result[0].toBoolean();
  }

  try_awardInProgress(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "awardInProgress",
      "awardInProgress():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  epochEndAt(): BigInt {
    let result = super.call("epochEndAt", "epochEndAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochEndAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochEndAt", "epochEndAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochSeconds(): BigInt {
    let result = super.call("epochSeconds", "epochSeconds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochSeconds", "epochSeconds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochStartedAt(): BigInt {
    let result = super.call("epochStartedAt", "epochStartedAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochStartedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochStartedAt",
      "epochStartedAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApeCoinStake(): ApeBlendr__getApeCoinStakeResultValue0Struct {
    let result = super.call(
      "getApeCoinStake",
      "getApeCoinStake():((uint256,uint256,uint256,uint256,uint256,(uint256,uint256)))",
      []
    );

    return changetype<ApeBlendr__getApeCoinStakeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getApeCoinStake(): ethereum.CallResult<
    ApeBlendr__getApeCoinStakeResultValue0Struct
  > {
    let result = super.tryCall(
      "getApeCoinStake",
      "getApeCoinStake():((uint256,uint256,uint256,uint256,uint256,(uint256,uint256)))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ApeBlendr__getApeCoinStakeResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", "getCurrentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTime",
      "getCurrentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasEpochEnded(): boolean {
    let result = super.call("hasEpochEnded", "hasEpochEnded():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasEpochEnded(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasEpochEnded", "hasEpochEnded():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalPrizeDraws(): BigInt {
    let result = super.call(
      "totalPrizeDraws",
      "totalPrizeDraws():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPrizeDraws(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrizeDraws",
      "totalPrizeDraws():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _apeCoin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _apeCoinStaking(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _apeBlendrFeeBps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _epochSeconds(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _epochStartedAt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _callbackGasLimit(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _requestConfirmations(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get _numWords(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _vrfCordinator(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnterApeBlendrCall extends ethereum.Call {
  get inputs(): EnterApeBlendrCall__Inputs {
    return new EnterApeBlendrCall__Inputs(this);
  }

  get outputs(): EnterApeBlendrCall__Outputs {
    return new EnterApeBlendrCall__Outputs(this);
  }
}

export class EnterApeBlendrCall__Inputs {
  _call: EnterApeBlendrCall;

  constructor(call: EnterApeBlendrCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterApeBlendrCall__Outputs {
  _call: EnterApeBlendrCall;

  constructor(call: EnterApeBlendrCall) {
    this._call = call;
  }
}

export class ExitApeBlendrCall extends ethereum.Call {
  get inputs(): ExitApeBlendrCall__Inputs {
    return new ExitApeBlendrCall__Inputs(this);
  }

  get outputs(): ExitApeBlendrCall__Outputs {
    return new ExitApeBlendrCall__Outputs(this);
  }
}

export class ExitApeBlendrCall__Inputs {
  _call: ExitApeBlendrCall;

  constructor(call: ExitApeBlendrCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExitApeBlendrCall__Outputs {
  _call: ExitApeBlendrCall;

  constructor(call: ExitApeBlendrCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartApeCoinAwardingProcessCall extends ethereum.Call {
  get inputs(): StartApeCoinAwardingProcessCall__Inputs {
    return new StartApeCoinAwardingProcessCall__Inputs(this);
  }

  get outputs(): StartApeCoinAwardingProcessCall__Outputs {
    return new StartApeCoinAwardingProcessCall__Outputs(this);
  }
}

export class StartApeCoinAwardingProcessCall__Inputs {
  _call: StartApeCoinAwardingProcessCall;

  constructor(call: StartApeCoinAwardingProcessCall) {
    this._call = call;
  }
}

export class StartApeCoinAwardingProcessCall__Outputs {
  _call: StartApeCoinAwardingProcessCall;

  constructor(call: StartApeCoinAwardingProcessCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
